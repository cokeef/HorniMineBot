from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import get_application_by_user_id, get_open_tickets_by_user

async def get_main_menu(is_admin: bool, user_id: int) -> InlineKeyboardMarkup:
    if is_admin:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏", callback_data="view_applications")],
            [InlineKeyboardButton(text="üÜò –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="view_tickets")]
        ])
    application = await get_application_by_user_id(user_id)
    buttons = []
    if application:
        buttons.append([InlineKeyboardButton(text="üìã –ú–æ—è –∑–∞—è–≤–∫–∞", callback_data="view_application")])
    else:
        buttons.append([InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application")])
    buttons.append([InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="create_ticket")])
    buttons.append([InlineKeyboardButton(text="‚ÑπÔ∏è –û —Å–µ—Ä–≤–µ—Ä–µ", callback_data="about_server")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏", callback_data="view_applications")],
        [InlineKeyboardButton(text="üÜò –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="view_tickets")]
    ])

async def get_application_menu(status: str, edit_count: int) -> InlineKeyboardMarkup:
    buttons = []
    if status == "pending" and edit_count < 3:
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_application")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_application_action_keyboard(application_id: int, status: str) -> InlineKeyboardMarkup:
    buttons = []
    if status == "pending":
        buttons.extend([
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{application_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{application_id}")],
            [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{application_id}")]
        ])
    buttons.extend([
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{application_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_application_status_keyboard(action: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=action)]
    ])

async def get_application_description_keyboard(is_edit: bool) -> InlineKeyboardMarkup:
    buttons = []
    if is_edit:
        buttons.append([InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="keep_description")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_application_media_keyboard(is_edit: bool) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_application")],
    ]
    if is_edit:
        buttons.append([InlineKeyboardButton(text="üìé –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–µ –º–µ–¥–∏–∞", callback_data="keep_media")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_user_ticket_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ —Ç–∏–∫–µ—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data="exit_chat")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="close_user_ticket")]
    ])

def get_user_tickets_menu(tickets: list) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=f"üÜò –í–æ–ø—Ä–æ—Å #{ticket[0]}", callback_data=f"view_my_ticket_{ticket[0]}")]
        for ticket in tickets
    ]
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="create_ticket")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_support_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_ticket")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="view_my_tickets")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

def get_admin_ticket_keyboard(ticket_id: int, in_chat: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–æ–º"""
    buttons = []
    
    if not in_chat:
        buttons.append([InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"admin_chat_ticket_{ticket_id}")])
    
    buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"admin_close_ticket_{ticket_id}")])
    
    if in_chat:
        buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="view_tickets")])
    else:
        buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_tickets")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_platform_choice_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Java", callback_data="platform_java")],
        [InlineKeyboardButton(text="Bedrock", callback_data="platform_bedrock")],
        [InlineKeyboardButton(text="–û–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="platform_both")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_previous_step")]
    ])

def get_back_button_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_previous_step")]
    ])

def get_accept_policy_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="accept_policy")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_skip_or_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_step")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_previous_step")]
    ])

def get_media_continue_keyboard(media_type: str, current_count: int, max_count: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç—á–∏–∫–æ–º"""
    buttons = []
    if current_count >= max_count:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_from_{media_type}")])
    else:
        buttons.append([InlineKeyboardButton(text=f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({current_count}/{max_count})", callback_data=f"continue_from_{media_type}")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_previous_step")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_application_review_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_application")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_application_form")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])