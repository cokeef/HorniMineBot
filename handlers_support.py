from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext, StorageKey
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from config import ADMIN_IDS
from db import get_pending_applications, get_application_by_id, update_application, delete_application, get_application_media, get_user, get_open_tickets, get_ticket_by_id, add_ticket_message, close_ticket, assign_admin_to_ticket, get_open_tickets_by_user
import logging
from keyboards import get_admin_menu, get_application_action_keyboard, get_application_status_keyboard, get_main_menu, get_support_menu
from datetime import datetime
from .utils import translate_status, format_datetime, delete_messages, safe_message_delete, extract_id_from_callback, get_state_data, get_message_content_and_type, send_media_message
from .constants import *

support_router = Router()
logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
support_router.message.filter(F.from_user.id.in_(ADMIN_IDS))
support_router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))

class CommentStates(StatesGroup):
    waiting_for_comment = State()

def translate_status(status: str) -> str:
    statuses = {
        "pending": "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
        "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    }
    return statuses.get(status, status)

@support_router.callback_query(F.data == "view_applications")
async def view_applications(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        applications = await get_pending_applications()
        if not applications:
            await callback.message.answer(
                "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.",
                reply_markup=get_admin_menu()
            )
        else:
            for app in applications:
                user = await get_user(app[1])
                username = f"@{user[1]}" if user and user[1] else f"ID {app[1]}"
                media = await get_application_media(app[0])
                media_count = len(media)
                await callback.message.answer(
                    f"üìù –ó–∞—è–≤–∫–∞ #{app[0]} –æ—Ç {username}:\n"
                    f"–°—Ç–∞—Ç—É—Å: {translate_status(app[2])}\n"
                    f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {app[3] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                    f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {app[4] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                    f"üìé –§–∞–π–ª–æ–≤: {media_count}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(app[5])}\n"
                    f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: {app[6] or 0}/3",
                    reply_markup=get_application_action_keyboard(app[0], app[2])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_applications –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫.")
    await callback.answer()

@support_router.callback_query(F.data.startswith("view_application_"))
async def view_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application_id = int(callback.data.split("_")[2])
        application = await get_application_by_id(application_id)
        if not application:
            await callback.message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
            return
        user = await get_user(application[1])
        username = f"@{user[1]}" if user and user[1] else f"ID {application[1]}"
        media = await get_application_media(application[0])
        media_count = len(media)
        message = await callback.message.answer(
            f"üìù –ó–∞—è–≤–∫–∞ #{application[0]} –æ—Ç {username}:\n"
            f"–°—Ç–∞—Ç—É—Å: {translate_status(application[2])}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {application[3] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {application[4] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"üìé –§–∞–π–ª–æ–≤: {media_count}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(application[5])}\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: {application[6] or 0}/3",
            reply_markup=get_application_action_keyboard(application[0], application[2])
        )
        media_message_ids = []
        for item in media:
            try:
                if item[3] == "photo":
                    media_message = await bot.send_photo(callback.from_user.id, item[2])
                elif item[3] == "video":
                    media_message = await bot.send_video(callback.from_user.id, item[2])
                elif item[3] == "document":
                    media_message = await bot.send_document(callback.from_user.id, item[2])
                media_message_ids.append(media_message.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ {item[2]} –∞–¥–º–∏–Ω—É {callback.from_user.id}: {e}")
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –º–µ–¥–∏–∞.")
        await state.update_data(message_id=message.message_id, media_message_ids=media_message_ids)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@support_router.callback_query(F.data.startswith("approve_"))
async def approve_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application_id = int(callback.data.split("_")[1])
        application = await get_application_by_id(application_id)
        if not application:
            await callback.message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
            return
        await update_application(application_id, application[3], application[6], "approved")
        user = await get_user(application[1])
        username = f"@{user[1]}" if user and user[1] else f"ID {application[1]}"
        await bot.send_message(
            application[1],
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –æ–¥–æ–±—Ä–µ–Ω–∞!"
        )
        await callback.message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç {username} –æ–¥–æ–±—Ä–µ–Ω–∞.",
            reply_markup=get_admin_menu()
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ #{application_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@support_router.callback_query(F.data.startswith("reject_"))
async def reject_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application_id = int(callback.data.split("_")[1])
        application = await get_application_by_id(application_id)
        if not application:
            await callback.message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
            return
        await update_application(application_id, application[3], application[6], "rejected")
        user = await get_user(application[1])
        username = f"@{user[1]}" if user and user[1] else f"ID {application[1]}"
        await bot.send_message(
            application[1],
            f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        await callback.message.answer(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç {username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_menu()
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@support_router.callback_query(F.data.startswith("comment_"))
async def comment_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application_id = int(callback.data.split("_")[1])
        application = await get_application_by_id(application_id)
        if not application:
            await callback.message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
            return
        await state.set_state(CommentStates.waiting_for_comment)
        await state.update_data(application_id=application_id)
        await callback.message.answer(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}:",
            reply_markup=get_application_status_keyboard("view_applications")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ comment_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    await callback.answer()

@support_router.message(StateFilter(CommentStates.waiting_for_comment), F.text)
async def process_comment(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        application_id = data.get("application_id")
        if not application_id:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        application = await get_application_by_id(application_id)
        if not application:
            await message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
            await state.clear()
            return
        comment = message.text
        await update_application(application_id, application[3], application[6], application[2])
        user = await get_user(application[1])
        username = f"@{user[1]}" if user and user[1] else f"ID {application[1]}"
        await bot.send_message(
            application[1],
            f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{application_id}:\n{comment}"
        )
        await message.answer(
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{application_id} –æ—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=get_admin_menu()
        )
        logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{application_id} –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_comment –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")

@support_router.callback_query(F.data.startswith("delete_"))
async def delete_application_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application_id = int(callback.data.split("_")[1])
        application = await get_application_by_id(application_id)
        if not application:
            await callback.message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
            return
        await delete_application(application_id)
        user = await get_user(application[1])
        username = f"@{user[1]}" if user and user[1] else f"ID {application[1]}"
        await bot.send_message(
            application[1],
            f"üóë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await callback.message.answer(
            f"üóë –ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç {username} —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_admin_menu()
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ #{application_id} —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_application_callback –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@support_router.callback_query()
async def unknown_callback_support(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        if callback.data.startswith("admin_chat_ticket_") or callback.data.startswith("admin_close_ticket_"):
            logger.info(f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π callback: {callback.data} –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä")
            # –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å, callback –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω admin_router
            return
        elif callback.data.startswith("chat_ticket_"):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_ticket_X –≤ admin_chat_ticket_X
            ticket_id = int(callback.data.split("_")[-1])
            new_callback_data = f"admin_chat_ticket_{ticket_id}"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data
            from aiogram.types import CallbackQuery as CallbackQueryType
            
            # –ó–∞–º–µ–Ω—è–µ–º data –≤ callback
            callback_data = callback.model_dump()
            callback_data["data"] = new_callback_data
            new_callback = CallbackQueryType.model_validate(callback_data)
            
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º {callback.data} -> {new_callback_data}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ admin_router
            from .handlers_admin import admin_chat_ticket
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSMContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            from aiogram.fsm.storage.base import StorageKey
            from aiogram.fsm.context import FSMContext
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state = FSMContext(
                bot=callback.bot,
                storage=callback.bot.fsm.storage,
                key=StorageKey(chat_id=callback.message.chat.id, user_id=callback.from_user.id, bot_id=callback.bot.id)
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
            await admin_chat_ticket(new_callback, state, callback.bot)
            return
        elif callback.data.startswith("view_ticket_"):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º view_ticket_X –≤ admin view_ticket_X
            ticket_id = int(callback.data.split("_")[-1])
            new_callback_data = f"view_ticket_{ticket_id}"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data
            from aiogram.types import CallbackQuery as CallbackQueryType
            
            # –ó–∞–º–µ–Ω—è–µ–º data –≤ callback
            callback_data = callback.model_dump()
            callback_data["data"] = new_callback_data
            new_callback = CallbackQueryType.model_validate(callback_data)
            
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º {callback.data} -> {new_callback_data}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ admin_router
            from .handlers_admin import view_ticket
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSMContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            from aiogram.fsm.storage.base import StorageKey
            from aiogram.fsm.context import FSMContext
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state = FSMContext(
                bot=callback.bot,
                storage=callback.bot.fsm.storage,
                key=StorageKey(chat_id=callback.message.chat.id, user_id=callback.from_user.id, bot_id=callback.bot.id)
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
            await view_ticket(new_callback, state, callback.bot)
            return
            
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback –≤ support_router: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        await callback.answer(f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@support_router.message()
async def unknown_message_support(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    if message.text and message.text.startswith('/start'):
        try:
            from .handlers_admin import admin_start
            await admin_start(message, state)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ /start –∫ admin_start: {e}")
    
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –≤ –æ—Å–æ–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if not current_state:
        await message.answer("ü§î –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())