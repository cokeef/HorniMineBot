from aiogram import Bot
from datetime import datetime
import logging
from typing import List, Optional, Tuple, Union
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

def translate_status(status: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    statuses = {
        "pending": "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
        "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        "open": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
        "closed": "üî¥ –ó–∞–∫—Ä—ã—Ç"
    }
    return statuses.get(status, status)

def format_datetime(timestamp) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    try:
        return datetime.fromisoformat(str(timestamp)).strftime("%d.%m.%Y %H:%M")
    except (ValueError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ {timestamp}: {e}")
        return str(timestamp)

async def delete_messages(bot: Bot, user_id: int, message_ids: List[Optional[int]]) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message_ids:
        return
    
    for msg_id in message_ids:
        if not msg_id:
            continue
        try:
            await bot.delete_message(user_id, msg_id)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if "message to delete not found" in str(e) or "message can't be deleted" in str(e):
                pass
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

async def safe_message_delete(message: Message) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await message.delete()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if "message to delete not found" in str(e) or "message can't be deleted" in str(e):
            pass
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def extract_id_from_callback(callback: CallbackQuery, prefix: str) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö"""
    try:
        return int(callback.data.split(f"{prefix}_")[1])
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ callback {callback.data}: {e}")
        return None

async def get_state_data(state: FSMContext, keys: List[str]) -> Tuple[Union[int, str, None], ...]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    return tuple(data.get(key) for key in keys)

def get_message_content_and_type(message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
    content = message.text or message.caption or ""
    message_type = "unknown"
    
    if message.text:
        message_type = "text"
    elif message.photo:
        content = message.photo[-1].file_id
        message_type = "photo"
    elif message.video:
        content = message.video.file_id
        message_type = "video"
    elif message.document:
        content = message.document.file_id
        message_type = "document"
    elif message.sticker:
        content = message.sticker.file_id
        message_type = "sticker"
    
    return content, message_type

async def send_media_message(bot, chat_id, message_type, content, caption=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞"""
    try:
        if message_type == "text":
            return await bot.send_message(chat_id, content)
        elif message_type == "photo":
            return await bot.send_photo(chat_id, content, caption=caption)
        elif message_type == "video":
            return await bot.send_video(chat_id, content, caption=caption)
        elif message_type == "document":
            return await bot.send_document(chat_id, content, caption=caption)
        elif message_type == "sticker":
            return await bot.send_sticker(chat_id, content)
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            return await bot.send_message(chat_id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ {message_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return None 