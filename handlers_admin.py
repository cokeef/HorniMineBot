from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter, Command, CommandStart
from config import ADMIN_IDS
from db import get_pending_applications, get_application_by_id, update_application_status, get_application_media, get_open_tickets, delete_application, get_ticket_messages, update_application_comment, get_user, get_ticket_by_id, assign_admin_to_ticket, close_ticket, add_ticket_message, add_user
import logging
import aiosqlite
from keyboards import get_admin_menu, get_application_action_keyboard, get_main_menu, get_admin_ticket_keyboard
from aiogram.fsm.storage.base import StorageKey
from datetime import datetime
from .utils import translate_status, format_datetime, delete_messages, safe_message_delete, extract_id_from_callback, get_state_data, get_message_content_and_type, send_media_message
from .constants import *

admin_router = Router()

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ __init__.py
# admin_router.message.filter(F.from_user.id.in_(ADMIN_IDS))
# admin_router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))

logger = logging.getLogger(__name__)

class AdminCommentStates(StatesGroup):
    waiting_for_comment = State()

class AdminSupportStates(StatesGroup):
    chatting = State()

def translate_status(status: str) -> str:
    statuses = {
        "pending": "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
        "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    }
    return statuses.get(status, status)

async def get_applications_by_status(status: str):
    async with aiosqlite.connect('data/bot.db') as db:
        async with db.execute('''
            SELECT application_id, user_id, status, description, comment, created_at, edit_count
            FROM applications
            WHERE status = ?
            ORDER BY created_at
        ''', (status,)) as cursor:
            return await cursor.fetchall()

@admin_router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery):
    try:
        await callback.message.delete()
        await callback.message.answer(
            "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_menu –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    await callback.answer()

@admin_router.callback_query(F.data == "view_applications")
async def view_applications_admin(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        await callback.message.answer(
            "üì¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—Ç", callback_data="view_pending")],
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="view_approved")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="view_rejected")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_applications_admin –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫.")
    await callback.answer()

@admin_router.callback_query(F.data == "view_pending")
async def view_pending_applications(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        applications = await get_pending_applications()
        if not applications:
            await callback.message.answer(
                "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_applications")]
                ])
            )
        else:
            buttons = []
            for app in applications:
                user = await get_user(app[1])
                username = f"@{user[1]}" if user[1] else f"ID {app[1]}"
                buttons.append([InlineKeyboardButton(text=f"üìù –ó–∞—è–≤–∫–∞ #{app[0]} –æ—Ç {username}", callback_data=f"view_application_{app[0]}")])
            buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_applications")])
            await callback.message.answer(
                "üì¨ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_pending_applications –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫.")
    await callback.answer()

@admin_router.callback_query(F.data == "view_approved")
async def view_approved_applications(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        applications = await get_applications_by_status('approved')
        if not applications:
            await callback.message.answer(
                "üì≠ –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_applications")]
                ])
            )
        else:
            buttons = []
            for app in applications:
                user = await get_user(app[1])
                username = f"@{user[1]}" if user[1] else f"ID {app[1]}"
                buttons.append([InlineKeyboardButton(text=f"üìù –ó–∞—è–≤–∫–∞ #{app[0]} –æ—Ç {username}", callback_data=f"view_application_{app[0]}")])
            buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_applications")])
            await callback.message.answer(
                "üì¨ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_approved_applications –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫.")
    await callback.answer()

@admin_router.callback_query(F.data == "view_rejected")
async def view_rejected_applications(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        applications = await get_applications_by_status('rejected')
        if not applications:
            await callback.message.answer(
                "üì≠ –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_applications")]
                ])
            )
        else:
            buttons = []
            for app in applications:
                user = await get_user(app[1])
                username = f"@{user[1]}" if user[1] else f"ID {app[1]}"
                buttons.append([InlineKeyboardButton(text=f"üìù –ó–∞—è–≤–∫–∞ #{app[0]} –æ—Ç {username}", callback_data=f"view_application_{app[0]}")])
            buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_applications")])
            await callback.message.answer(
                "üì¨ –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_rejected_applications –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("view_application_"))
async def view_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        application_id = int(callback.data.split("_")[2])
        application = await get_application_by_id(application_id)
        if not application:
            await callback.message.answer(
                "üì≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_admin_menu()
            )
        else:
            user = await get_user(application[1])
            username = f"@{user[1]}" if user[1] else f"ID {application[1]}"
            media = await get_application_media(application[0])
            media_count = len(media)
            message = await callback.message.answer(
                f"üìù –ó–∞—è–≤–∫–∞ #{application[0]}:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"–°—Ç–∞—Ç—É—Å: {translate_status(application[2])}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {application[3] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {application[4] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üìé –§–∞–π–ª–æ–≤: {media_count}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(application[5])}",
                reply_markup=get_application_action_keyboard(application[0], application[2])
            )
            media_message_ids = []
            for item in media:
                try:
                    if item[3] == "photo":
                        media_message = await bot.send_photo(callback.from_user.id, item[2])
                    elif item[3] == "video":
                        media_message = await bot.send_video(callback.from_user.id, item[2])
                    elif item[3] == "document":
                        media_message = await bot.send_document(callback.from_user.id, item[2])
                    media_message_ids.append(media_message.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ {item[2]} –∞–¥–º–∏–Ω—É {callback.from_user.id}: {e}")
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –º–µ–¥–∏–∞.")
            await state.update_data(
                message_id=message.message_id,
                media_message_ids=media_message_ids
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("approve_"))
async def approve_application(callback: CallbackQuery, bot: Bot):
    application_id = int(callback.data.split("_")[1])
    application = await get_application_by_id(application_id)
    
    if not application:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    full_data = await get_full_application_data(application_id)
    
    if not full_data:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∞–π—Ç–ª–∏—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if full_data['player_platform'] in ["java", "both"] and full_data['player_nickname_java']:
        success = await execute_whitelist_command(full_data['player_nickname_java'], "java")
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist Java", show_alert=True)
            return
    
    if full_data['player_platform'] in ["bedrock", "both"] and full_data['player_nickname_bedrock']:
        success = await execute_whitelist_command(full_data['player_nickname_bedrock'], "bedrock")
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ fwhitelist Bedrock", show_alert=True)
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await update_application_status(application_id, "approved", "")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        application[1],
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."
    )
    
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", show_alert=True)
    await callback.message.edit_reply_markup(
        reply_markup=get_application_action_keyboard(application_id, "approved")
    )

@admin_router.callback_query(F.data.startswith("reject_"))
async def reject_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        data = await state.get_data()
        await delete_messages(bot, callback.from_user.id, [data.get("message_id")] + data.get("media_message_ids", []))
        application_id = int(callback.data.split("_")[1])
        application = await get_application_by_id(application_id)
        if application[2] != "pending":
            await callback.message.answer(
                f"üìù –ó–∞—è–≤–∫–∞ #{application_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({translate_status(application[2])}).",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        await update_application_status(application_id, "rejected", application[4] or "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        user = await get_user(application[1])
        username = f"@{user[1]}" if user[1] else f"ID {application[1]}"
        try:
            await bot.send_message(
                application[1],
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        await callback.message.answer(
            f"üìù –ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç {username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("comment_"))
async def comment_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        data = await state.get_data()
        await delete_messages(bot, callback.from_user.id, [data.get("message_id")] + data.get("media_message_ids", []))
        application_id = int(callback.data.split("_")[1])
        await state.update_data(application_id=application_id)
        message = await callback.message.answer(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
            ])
        )
        await state.update_data(message_id=message.message_id, media_message_ids=[])
        await state.set_state(AdminCommentStates.waiting_for_comment)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ comment_application –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    await callback.answer()

@admin_router.message(StateFilter(AdminCommentStates.waiting_for_comment), F.text)
async def process_comment(message: Message, state: FSMContext, bot: Bot):
    try:
        comment = message.text
        data = await state.get_data()
        application_id = data.get("application_id")
        await delete_messages(bot, message.from_user.id, [data.get("message_id")])
        await update_application_comment(application_id, comment)
        application = await get_application_by_id(application_id)
        user = await get_user(application[1])
        username = f"@{user[1]}" if user[1] else f"ID {application[1]}"
        try:
            await bot.send_message(
                application[1],
                f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{application_id}:\n{comment}"
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ #{application_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        await message.answer(
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_admin_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_comment –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")

@admin_router.callback_query(F.data.startswith("delete_"))
async def delete_application_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        data = await state.get_data()
        await delete_messages(bot, callback.from_user.id, [data.get("message_id")] + data.get("media_message_ids", []))
        application_id = int(callback.data.split("_")[1])
        user_id = await delete_application(application_id)
        if user_id:
            user = await get_user(user_id)
            username = f"@{user[1]}" if user[1] else f"ID {user_id}"
            try:
                await bot.send_message(
                    user_id,
                    f"üóë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        await callback.message.answer(
            f"üóë –ó–∞—è–≤–∫–∞ #{application_id} —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_admin_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_application_handler –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@admin_router.callback_query(F.data == "view_tickets")
async def view_open_tickets(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        await callback.answer()
        return
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        await callback.answer()
        
        await callback.message.delete()
        tickets = await get_open_tickets()
        if not tickets:
            await callback.message.answer(
                "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=get_admin_menu()
            )
        else:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            buttons = []
            for ticket in tickets:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                is_active = ticket[5] if len(ticket) > 5 else 0
                if is_active != 1:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user = await get_user(ticket[1])
                    username = f"@{user[1]}" if user and len(user) > 1 and user[1] else f"ID {ticket[1]}"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ticket[1]}: {e}")
                    username = f"ID {ticket[1]}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ –≤–æ–ø—Ä–æ—Å
                admin_assigned = "‚úì" if ticket[3] else "‚úó"
                
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üÜò #{ticket[0]} –æ—Ç {username} | –ê–¥–º–∏–Ω: {admin_assigned}",
                        callback_data=f"view_ticket_{ticket[0]}"
                    )
                ])
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            if not buttons:
                await callback.message.answer(
                    "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=get_admin_menu()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            await callback.message.answer(
                "üÜò –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_open_tickets –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        # –ß—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ —á–∞—Å–∏–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç, –æ—Ç–≤–µ—á–∞–µ–º –µ—â–µ —Ä–∞–∑, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏
        try:
            await callback.answer()
        except Exception:
            pass

@admin_router.callback_query(F.data.startswith("view_ticket_"))
async def view_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    try:
        await callback.message.delete()
        ticket_id = int(callback.data.split("_")[2])
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await callback.message.answer(
                "üì≠ –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        user_id = ticket[1]
        admin_id = ticket[3] if len(ticket) > 3 else None
        created_at = ticket[4] if len(ticket) > 4 else None
        is_active = ticket[5] if len(ticket) > 5 else 0
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await get_user(user_id)
        username = f"@{user[1]}" if user and len(user) > 1 and user[1] else f"ID {user_id}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ
        ticket_info = (
            f"üÜò –í–æ–ø—Ä–æ—Å #{ticket_id} –æ—Ç {username}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(created_at)}\n"
            f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if is_active == 1 else 'üî¥ –ó–∞–∫—Ä—ã—Ç'}\n"
            f"üë®‚Äçüíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {admin_id or '–ù–µ—Ç'}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        if is_active == 1:
            keyboard = get_admin_ticket_keyboard(ticket_id)
        else:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_tickets")
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        message = await callback.message.answer(ticket_info, reply_markup=keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–µ
        messages = await get_ticket_messages(ticket_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        media_message_ids = []
        
        if not messages:
            info_msg = await callback.message.answer("üì≠ –í —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ –µ—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            media_message_ids.append(info_msg.message_id)
        else:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            history_header = await callback.message.answer("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:")
            media_message_ids.append(history_header.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–ø—Ä–æ—Å–∞
            count = 0
            for msg in messages:
                if count >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    break
                
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg_id = msg[0] 
                    msg_type = msg[3] if len(msg) > 3 else "text"
                    msg_content = msg[4] if len(msg) > 4 else ""
                    msg_time = format_datetime(msg[5]) if len(msg) > 5 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    msg_sender_type = msg[6] if len(msg) > 6 else "user"
                    msg_username = msg[7] if len(msg) > 7 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
                    sender_prefix = "üë§" if msg_sender_type == "user" else "üë®‚Äçüíº"
                    sender_name = f"{sender_prefix} {msg_username}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if msg_type == "text":
                        msg_text = f"{sender_name} ({msg_time}):\n{msg_content}"
                        media_msg = await callback.message.answer(msg_text)
                        media_message_ids.append(media_msg.message_id)
                    elif msg_type == "sticker":
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                        sticker_msg = await bot.send_sticker(callback.from_user.id, msg_content)
                        media_message_ids.append(sticker_msg.message_id)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä–µ
                        info_msg = await callback.message.answer(f"{sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä ({msg_time})")
                        media_message_ids.append(info_msg.message_id)
                    else:
                        # –î–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        caption = f"{sender_name} ({msg_time})"
                        
                        if msg_type == "photo":
                            media_msg = await bot.send_photo(callback.from_user.id, msg_content, caption=caption)
                        elif msg_type == "video":
                            media_msg = await bot.send_video(callback.from_user.id, msg_content, caption=caption)
                        elif msg_type == "document":
                            media_msg = await bot.send_document(callback.from_user.id, msg_content, caption=caption)
                        else:
                            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            media_msg = await callback.message.answer(f"{sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞—Ñ–∞–π–ª ({msg_time})")
                        
                        media_message_ids.append(media_msg.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg[0] if len(msg) > 0 else 'unknown'}: {e}")
                
                count += 1
                
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
            if len(messages) > 10:
                more_msg = await callback.message.answer(f"... –∏ –µ—â–µ {len(messages) - 10} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.")
                media_message_ids.append(more_msg.message_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(message_id=message.message_id, media_message_ids=media_message_ids)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_ticket –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await callback.answer()

@admin_router.callback_query()
async def handle_admin_callbacks(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ callback –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—á–∞—Ç)
        if callback.data.startswith("admin_chat_ticket_"):
            ticket_id = int(callback.data.split("_")[-1])
            logger.info(f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å admin_chat_ticket_{ticket_id} –Ω–∞ admin_chat_ticket")
            return await admin_chat_ticket(callback, state, bot)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        elif callback.data.startswith("admin_close_ticket_"):
            ticket_id = int(callback.data.split("_")[-1])
            logger.info(f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å admin_close_ticket_{ticket_id} –Ω–∞ admin_close_ticket")
            return await admin_close_ticket(callback, state, bot)
        
        # –û–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö callback
        elif callback.data == "back_to_main":
            await callback.message.delete()
            await callback.message.answer(
                "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_menu()
            )
        elif callback.data == "view_tickets":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤")
            await view_open_tickets(callback)
        elif callback.data == "view_applications":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫")
            await view_applications_admin(callback)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data} –æ—Ç –∞–¥–º–∏–Ω–∞ {callback.from_user.id}")
            await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback.data}: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=get_admin_menu()
        )
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

@admin_router.message()
async def all_admin_messages(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    current_state = await state.get_state()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}', —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    if current_state == "AdminSupportStates:chatting":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ: {data}")
        
        ticket_id = data.get("ticket_id")
        user_id = data.get("user_id")
        
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç #{ticket_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not ticket_id or not user_id:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {data}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_admin_menu()
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_menu()
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å
        is_active = ticket[5] if len(ticket) > 5 else 0
        if is_active == 0:
            await message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è.",
                reply_markup=get_admin_menu()
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        content, message_type = get_message_content_and_type(message)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏–º–µ–µ—Ç —Ç–∏–ø {message_type} –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == "unknown":
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await add_ticket_message(ticket_id, message.from_user.id, message.message_id, message_type, content, "admin")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if message_type == "text":
                await bot.send_message(
                    user_id,
                    f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É #{ticket_id}:\n{content}"
                )
            elif message_type == "sticker":
                await bot.send_sticker(user_id, content)
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                await bot.send_message(
                    user_id, 
                    f"üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É #{ticket_id}"
                )
            else:
                # –î–ª—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                caption = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É #{ticket_id}"
                if message.caption:
                    caption += f"\n{message.caption}"
                
                if message_type == "photo":
                    await bot.send_photo(user_id, content, caption=caption)
                elif message_type == "video":
                    await bot.send_video(user_id, content, caption=caption)
                elif message_type == "document":
                    await bot.send_document(user_id, content, caption=caption)
                    
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
            conf_message = await message.answer(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
                reply_markup=get_admin_ticket_keyboard(ticket_id, in_chat=True)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            prev_conf_id = data.get("confirmation_message_id")
            if prev_conf_id:
                try:
                    await bot.delete_message(message.from_user.id, prev_conf_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await state.update_data(confirmation_message_id=conf_message.message_id)
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.",
                reply_markup=get_admin_ticket_keyboard(ticket_id, in_chat=True)
            )
            
        return
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    if message.text and message.text.startswith('/start'):
        try:
            await state.clear()
            await add_user(message.from_user.id, message.from_user.username or str(message.from_user.id))
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å HorniMineBot!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_admin_menu()
            )
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –≤ –æ—Å–æ–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    if not current_state:
        await message.answer(
            "ü§î –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_menu()
        )

@admin_router.message(CommandStart())
async def admin_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    try:
        await state.clear()
        await add_user(message.from_user.id, message.from_user.username or str(message.from_user.id))
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å HorniMineBot!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_start –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@admin_router.callback_query(F.data.startswith("admin_chat_ticket_"))
async def admin_chat_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
        ticket_id = int(callback.data.split("_")[-1])
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç –ø–æ –≤–æ–ø—Ä–æ—Å—É #{ticket_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        message_id = data.get("message_id")
        media_message_ids = data.get("media_message_ids", [])
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if message_id or media_message_ids:
            await delete_messages(bot, callback.from_user.id, [message_id] + media_message_ids if message_id else media_message_ids)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        is_active = ticket[5] if len(ticket) > 5 else 0
        if is_active == 0:
            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è.",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        user_id = ticket[1]
        await assign_admin_to_ticket(ticket_id, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await get_user(user_id)
        username = f"@{user[1]}" if user and user[1] else f"ID {user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç
        message = await callback.message.answer(
            f"üí¨ –í—ã –≤ —á–∞—Ç–µ —Å {username} (–≤–æ–ø—Ä–æ—Å #{ticket_id}).\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
            reply_markup=get_admin_ticket_keyboard(ticket_id, in_chat=True)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(AdminSupportStates.chatting)
        await state.update_data(
            ticket_id=ticket_id,
            user_id=user_id,  # –í–∞–∂–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_id=message.message_id,
            media_message_ids=[]
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: ticket_id={ticket_id}, user_id={user_id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 5)
        messages = await get_ticket_messages(ticket_id)
        if messages:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            last_messages = messages[-5:] if len(messages) > 5 else messages
            media_message_ids = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
            history_header = await callback.message.answer("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            media_message_ids.append(history_header.message_id)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in last_messages:
                try:
                    msg_type = msg[3] if len(msg) > 3 else "text"
                    msg_content = msg[4] if len(msg) > 4 else ""
                    msg_time = format_datetime(msg[5]) if len(msg) > 5 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    msg_sender_type = msg[6] if len(msg) > 6 else "user"
                    msg_username = msg[7] if len(msg) > 7 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    sender_prefix = "üë§" if msg_sender_type == "user" else "üë®‚Äçüíº"
                    sender_name = f"{sender_prefix} {msg_username}"
                    
                    if msg_type == "text":
                        msg_text = f"{sender_name} ({msg_time}):\n{msg_content}"
                        history_msg = await callback.message.answer(msg_text)
                        media_message_ids.append(history_msg.message_id)
                    elif msg_type in ["photo", "video", "document", "sticker"]:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
                        caption = f"{sender_name} ({msg_time})"
                        media_msg = await send_media_message(bot, callback.from_user.id, msg_type, msg_content, caption)
                        if media_msg:
                            media_message_ids.append(media_msg.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            separator = await callback.message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
            media_message_ids.append(separator.message_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID –º–µ–¥–∏–∞—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(media_message_ids=media_message_ids)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É #{ticket_id}."
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –≤—Ö–æ–¥–µ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_chat_ticket –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_close_ticket_"))
async def admin_close_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
        ticket_id = int(callback.data.split("_")[-1])
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å #{ticket_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å
        ticket_status = ticket[2] if len(ticket) > 2 else STATUS_CLOSED
        if ticket_status == STATUS_CLOSED:
            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç.",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = ticket[1]
        user = await get_user(user_id)
        username = f"@{user[1]}" if user and user[1] else f"ID {user_id}"
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        success = await close_ticket(ticket_id)
        if not success:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_admin_menu()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        current_state = await state.get_state()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ
        if current_state == AdminSupportStates.chatting.__str__():
            message_id = data.get("message_id")
            media_message_ids = data.get("media_message_ids", [])
            
            if message_id or media_message_ids:
                await delete_messages(bot, callback.from_user.id, [message_id] + media_message_ids if message_id else media_message_ids)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å #{ticket_id}."
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await callback.message.answer(
            f"‚úÖ –í–æ–ø—Ä–æ—Å #{ticket_id} –æ—Ç {username} –∑–∞–∫—Ä—ã—Ç.",
            reply_markup=get_admin_menu()
        )
        
        logger.info(f"–í–æ–ø—Ä–æ—Å #{ticket_id} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_close_ticket –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        await callback.answer()

@admin_router.callback_query(F.data == "view_tickets")
async def back_to_tickets_list(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–∞—Ç–∞"""
    try:
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        ticket_id = data.get("ticket_id")
        message_id = data.get("message_id")
        media_message_ids = data.get("media_message_ids", [])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        if message_id or media_message_ids:
            await delete_messages(bot, callback.from_user.id, [message_id] + media_message_ids if message_id else media_message_ids)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        await view_open_tickets(callback)
        
        # –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if ticket_id:
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ #{ticket_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_tickets_list –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=get_admin_menu()
        )
        await callback.answer()