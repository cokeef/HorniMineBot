from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.storage.base import StorageKey
from config import ADMIN_IDS
from db import add_user, get_application_by_user_id, add_application, update_application, add_application_media, get_application_media, add_ticket, add_ticket_message, close_ticket, get_ticket_by_id, get_user, get_open_tickets_by_user, delete_application_media, update_application_field, add_application_with_platform, add_skin_media, add_project_media, get_application_media_by_category
import aiosqlite
import logging
from keyboards import get_main_menu, get_application_menu, get_user_ticket_keyboard, get_user_tickets_menu, get_back_button, get_support_menu, get_application_description_keyboard, get_application_media_keyboard, get_admin_menu, get_accept_policy_keyboard, get_back_button_keyboard
from datetime import datetime
from .utils import format_datetime, delete_messages, safe_message_delete, extract_id_from_callback, get_state_data, get_message_content_and_type, send_media_message
from .constants import *
from aiogram.utils.media_group import MediaGroupBuilder
from .handlers_admin import admin_chat_ticket, view_ticket, admin_start

user_router = Router()
logger = logging.getLogger(__name__)

# –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ñ–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_router.message.filter(
    lambda message: (
        not message.from_user.id in ADMIN_IDS or 
        (isinstance(message, Message) and message.text and message.text.startswith('/start'))
    )
)
user_router.callback_query.filter(~F.from_user.id.in_(ADMIN_IDS))

class ApplicationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_about = State()
    waiting_for_plans = State()
    waiting_for_community = State()
    waiting_for_platform = State()
    waiting_for_java_nickname = State()
    waiting_for_bedrock_nickname = State()
    waiting_for_skin = State()
    waiting_for_projects = State()
    waiting_for_referral = State()

class TicketStates(StatesGroup):
    waiting_for_message = State()
    chatting = State()

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
class ApplicationFormStates(StatesGroup):
    waiting_for_start = State()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–∏—Ç–∏–∫–∞
    waiting_for_name = State()   # –ò–º—è –∏–ª–∏ –Ω–∏–∫
    waiting_for_age = State()    # –í–æ–∑—Ä–∞—Å—Ç
    waiting_for_about = State()  # –û —Å–µ–±–µ
    waiting_for_plans = State()  # –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    waiting_for_community = State()  # –ß—Ç–æ –≤–∞–∂–Ω–æ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
    waiting_for_platform = State()   # –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    waiting_for_java_nickname = State()  # –ù–∏–∫ Java
    waiting_for_bedrock_nickname = State()  # –ù–∏–∫ Bedrock
    waiting_for_skin = State()  # –°–∫–∏–Ω (–¥–æ 2 —Ñ–∞–π–ª–æ–≤)
    waiting_for_projects = State()  # –ü—Ä–æ–µ–∫—Ç—ã (–¥–æ 5 —Ñ–∞–π–ª–æ–≤)
    waiting_for_referral = State()  # –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
    review_application = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

@user_router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    try:
        await state.clear()
        await add_user(message.from_user.id, message.from_user.username or str(message.from_user.id))
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HorniMineBot!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=await get_main_menu(message.from_user.id in ADMIN_IDS, message.from_user.id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data == "create_application")
async def create_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application = await get_application_by_user_id(callback.from_user.id)
        if application and application[2] in ["pending", "approved", "rejected"]:
            await callback.message.answer(
                f"üìù –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ (—Å—Ç–∞—Ç—É—Å: {translate_status(application[2])})!",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—ç—Ç–∞–ø–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
            await state.set_state(ApplicationFormStates.waiting_for_start)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ questions.md
            try:
                with open('questions.md', 'r', encoding='utf-8') as file:
                    policy_text = "\n".join(file.read().split('---')[0].strip().split('\n'))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {e}")
                policy_text = "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞."

            message = await callback.message.answer(
                policy_text,
                reply_markup=get_accept_policy_keyboard()
            )
            await state.update_data(last_message_id=message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_application –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback.answer()

@user_router.callback_query(F.data == "accept_policy", StateFilter(ApplicationFormStates.waiting_for_start))
async def process_policy_acceptance(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, callback.from_user.id, [last_message_id])
        await callback.message.delete()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        await add_user(callback.from_user.id, callback.from_user.username or str(callback.from_user.id))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∏–º—è –∏–ª–∏ –Ω–∏–∫
        await state.set_state(ApplicationFormStates.waiting_for_name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞ questions.md
        question = "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–ò–º—è –∏–ª–∏ –Ω–∏–∫)"
        try:
            with open('questions.md', 'r', encoding='utf-8') as file:
                content = file.read().split('---')[1].strip()
                for line in content.split('\n'):
                    if "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" in line:
                        question = line.strip()
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        message = await callback.message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_policy_acceptance –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@user_router.message(StateFilter(ApplicationFormStates.waiting_for_name), F.text)
async def process_name(message: Message, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, message.from_user.id, [last_message_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        player_name = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
        application = await get_application_by_user_id(message.from_user.id)
        if not application:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            await add_application(message.from_user.id)
            application = await get_application_by_user_id(message.from_user.id)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if application:
            await update_application_field(application[0], "player_name", player_name)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–æ–∑—Ä–∞—Å—Ç
        await state.set_state(ApplicationFormStates.waiting_for_age)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞ questions.md
        question = "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"
        try:
            with open('questions.md', 'r', encoding='utf-8') as file:
                content = file.read().split('---')[1].strip()
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?" in line:
                        question = line.strip()
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        message = await message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=message.message_id, application_id=application[0])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        await safe_message_delete(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(StateFilter(ApplicationFormStates.waiting_for_age), F.text)
async def process_age(message: Message, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, message.from_user.id, [last_message_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        player_age = message.text.strip()
        application_id = data.get('application_id')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_application_field(application_id, "player_age", player_age)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –æ —Å–µ–±–µ
        await state.set_state(ApplicationFormStates.waiting_for_about)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞ questions.md
        question = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: (–û–ø—ã—Ç –∏–≥—Ä—ã, –ª—é–±–∏–º—ã–µ –∞—Å–ø–µ–∫—Ç—ã Minecraft, —É—á–∞—Å—Ç–∏–µ –≤ –∂–∏–∑–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–¥–µ–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã)"
        try:
            with open('questions.md', 'r', encoding='utf-8') as file:
                content = file.read().split('---')[1].strip()
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:" in line:
                        question = line.strip()
                        if i+1 < len(lines) and lines[i+1].strip():
                            question += " " + lines[i+1].strip()
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        message = await message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        await safe_message_delete(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_age –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data == "back_to_previous_step")
async def back_to_previous_step(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        current_state = await state.get_state()
        await callback.message.delete()
        
        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        state_transitions = {
            ApplicationFormStates.waiting_for_name: ApplicationFormStates.waiting_for_start,
            ApplicationFormStates.waiting_for_age: ApplicationFormStates.waiting_for_name,
            ApplicationFormStates.waiting_for_about: ApplicationFormStates.waiting_for_age,
            ApplicationFormStates.waiting_for_plans: ApplicationFormStates.waiting_for_about,
            ApplicationFormStates.waiting_for_community: ApplicationFormStates.waiting_for_plans,
            ApplicationFormStates.waiting_for_platform: ApplicationFormStates.waiting_for_community,
            ApplicationFormStates.waiting_for_java_nickname: ApplicationFormStates.waiting_for_platform,
            ApplicationFormStates.waiting_for_bedrock_nickname: ApplicationFormStates.waiting_for_platform,
            ApplicationFormStates.waiting_for_skin: ApplicationFormStates.waiting_for_java_nickname,  # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–∞–¥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            ApplicationFormStates.waiting_for_projects: ApplicationFormStates.waiting_for_skin,
            ApplicationFormStates.waiting_for_referral: ApplicationFormStates.waiting_for_projects,
            ApplicationFormStates.review_application: ApplicationFormStates.waiting_for_referral,
            None: None  # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = await state.get_data()
        previous_state = state_transitions.get(current_state)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if current_state == ApplicationFormStates.waiting_for_skin:
            platform = data.get('platform')
            previous_state = ApplicationFormStates.waiting_for_java_nickname if platform in ['java', 'both'] else ApplicationFormStates.waiting_for_platform
        
        if previous_state is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await state.clear()
            await callback.message.answer(
                "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
        await state.set_state(previous_state)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        if previous_state == ApplicationFormStates.waiting_for_start:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –ø–æ–ª–∏—Ç–∏–∫–∏
            try:
                with open('questions.md', 'r', encoding='utf-8') as file:
                    policy_text = "\n".join(file.read().split('---')[0].strip().split('\n'))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {e}")
                policy_text = "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞."
                
            message = await callback.message.answer(
                policy_text,
                reply_markup=get_accept_policy_keyboard()
            )
            await state.update_data(last_message_id=message.message_id)
            
        elif previous_state == ApplicationFormStates.waiting_for_name:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–º–µ–Ω–∏
            question = "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–ò–º—è –∏–ª–∏ –Ω–∏–∫)"
            try:
                with open('questions.md', 'r', encoding='utf-8') as file:
                    content = file.read().split('---')[1].strip()
                    for line in content.split('\n'):
                        if "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" in line:
                            question = line.strip()
                            break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            
            message = await callback.message.answer(
                question,
                reply_markup=get_back_button_keyboard()
            )
            await state.update_data(last_message_id=message.message_id)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        else:
            await callback.message.answer(
                "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=get_back_button_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_previous_step –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@user_router.callback_query(F.data == "edit_application")
async def edit_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
        data = await state.get_data()
        await delete_messages(bot, callback.from_user.id, [data.get("message_id")] + data.get("media_message_ids", []))
        await start_edit_application(callback, state, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_application –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@user_router.callback_query(F.data == "keep_description")
async def keep_description(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
        data = await state.get_data()
        await delete_messages(bot, callback.from_user.id, [data.get("message_id")] + data.get("media_message_ids", []))
        application = await get_application_by_user_id(callback.from_user.id)
        if not application:
            await callback.message.answer(
                "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
            await state.clear()
            return
        await state.set_state(ApplicationStates.waiting_for_media)
        message = await callback.message.answer(
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ):",
            reply_markup=await get_application_media_keyboard(is_edit=True)
        )
        await state.update_data(message_id=message.message_id, media_message_ids=[])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ keep_description –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@user_router.message(StateFilter(ApplicationFormStates.waiting_for_about), F.text)
async def process_about(message: Message, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, message.from_user.id, [last_message_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç '–û —Å–µ–±–µ'
        about_text = message.text.strip()
        application_id = data.get('application_id')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if application_id:
            await update_application_field(application_id, "player_about", about_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–≤–æ–ø—Ä–æ—Å 4)
        await state.set_state(ApplicationFormStates.waiting_for_plans)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞ questions.md
        question = "üéÆ –ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ HorniMine?\n(–ò–≥—Ä–æ–≤–æ–π —Å—Ç–∏–ª—å, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, —Ç–æ—Ä–≥–æ–≤–ª—è –∏ —Ç.–¥.)"
        
        new_message = await message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        await safe_message_delete(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_about –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(StateFilter(ApplicationStates.waiting_for_skin), F.photo | F.document)
async def process_skin(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        media = data.get("skin_media", [])
        
        if len(media) >= 2:
            await message.answer("üö´ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 —Ñ–∞–π–ª–æ–≤ —Å–∫–∏–Ω–æ–≤.")
            return
        
        if message.photo:
            file_id = message.photo[-1].file_id
            media_type = "photo"
        else:
            file_id = message.document.file_id
            media_type = "document"
        
        media.append({"file_id": file_id, "media_type": media_type})
        await state.update_data(skin_media=media)
        
        await message.answer(
            f"‚úÖ –°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω ({len(media)}/2). –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.",
            reply_markup=get_media_continue_keyboard("skin", len(media), 2)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–∏–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–∏–Ω–∞")

@user_router.callback_query(F.data == "send_application")
async def send_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        application_id = await add_application_with_platform(
            callback.from_user.id,
            data.get("platform", "unknown")
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã
        fields_mapping = [
            ("name", "player_name"),
            ("age", "player_age"),
            ("about", "player_about"),
            ("plans", "player_plans"),
            ("community", "player_community"),
            ("java_nickname", "player_nickname_java"),
            ("bedrock_nickname", "player_nickname_bedrock"),
            ("referral", "player_referral")
        ]
        
        for state_field, db_field in fields_mapping:
            if state_field in data:
                await update_application_field(
                    application_id, 
                    db_field, 
                    data[state_field]
                )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        for media_type in ["skin", "projects"]:
            media_key = f"{media_type}_media"
            if media_key in data and data[media_key]:
                for media in data[media_key]:
                    await add_application_media(
                        application_id,
                        media["file_id"],
                        media["media_type"],
                        media_type
                    )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º—ã –≤ —Ñ–∞–π–ª
        await save_players_to_file(application_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        admin_message = "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–π—Ç–ª–∏—Å—Ç!"
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                callback_data=f"view_application_{application_id}"
            )]
        ])
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    admin_message,
                    reply_markup=admin_keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=get_back_button()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_button()
        )
    finally:
        await state.clear()
        await callback.answer()

@user_router.callback_query(F.data == "view_application")
async def view_my_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        application = await get_application_by_user_id(callback.from_user.id)
        if not application:
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
        else:
            media = await get_application_media(application[0])
            media_count = len(media)
            message = await callback.message.answer(
                f"üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application[0]}:\n"
                f"–°—Ç–∞—Ç—É—Å: {translate_status(application[2])}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {application[3] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {application[4] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üìé –§–∞–π–ª–æ–≤: {media_count}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(application[5])}\n"
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: {application[6] or 0}/3",
                reply_markup=await get_application_menu(application[2], application[6] or 0)
            )
            media_message_ids = []
            for item in media:
                try:
                    if item[3] == "photo":
                        media_message = await bot.send_photo(callback.from_user.id, item[2])
                    elif item[3] == "video":
                        media_message = await bot.send_video(callback.from_user.id, item[2])
                    elif item[3] == "document":
                        media_message = await bot.send_document(callback.from_user.id, item[2])
                    media_message_ids.append(media_message.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ {item[2]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}: {e}")
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –º–µ–¥–∏–∞.")
            await state.update_data(message_id=message.message_id, media_message_ids=media_message_ids)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_my_application –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏.")
    await callback.answer()

@user_router.callback_query(F.data.in_(["back_to_main", "cancel"]))
async def back_to_main(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        data = await state.get_data()
        message_id = data.get("message_id")
        media_message_ids = data.get("media_message_ids", [])
        await delete_messages(bot, callback.from_user.id, [message_id] + media_message_ids)
        if await state.get_state() == ApplicationStates.waiting_for_about:
            application = await get_application_by_user_id(callback.from_user.id)
            if application and application[6] == 0:
                async with aiosqlite.connect('data/bot.db') as db:
                    await db.execute('DELETE FROM applications WHERE application_id = ?', (application[0],))
                    await db.commit()
                logger.info(f"–ó–∞—è–≤–∫–∞ #{application[0]} —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        await callback.message.answer(
            "‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.")
    await callback.answer()

@user_router.callback_query(F.data == "create_ticket")
async def create_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        await callback.message.answer(
            "üÜò –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É admin@hornimine.fun –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å:",
            reply_markup=get_support_menu()
        )
        await state.update_data(message_id=callback.message.message_id, media_message_ids=[])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_ticket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    await callback.answer()

async def start_new_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        ticket_id = await add_ticket(callback.from_user.id)
        await state.set_state(TicketStates.waiting_for_message)
        message = await callback.message.answer(
            "üÜò –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Ç–∏–∫–µ—Ä), –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ])
        )
        await state.update_data(ticket_id=ticket_id, message_id=message.message_id, media_message_ids=[], last_message_time=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_new_ticket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")

@user_router.callback_query(F.data == "new_ticket")
async def new_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
        tickets = await get_open_tickets_by_user(callback.from_user.id)
        if tickets:
            message = await callback.message.answer(
                "üÜò –£ –≤–∞—Å –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", callback_data=f"view_my_ticket_{tickets[0][0]}")],
                    [InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="force_new_ticket")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="create_ticket")]
                ])
            )
            await state.update_data(message_id=message.message_id, media_message_ids=[])
        else:
            await start_new_ticket(callback, state, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ new_ticket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
    await callback.answer()

@user_router.callback_query(F.data == "force_new_ticket")
async def force_new_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
        await start_new_ticket(callback, state, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ force_new_ticket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
    await callback.answer()

@user_router.message(StateFilter(TicketStates.waiting_for_message))
async def process_ticket_message(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        ticket_id = data.get("ticket_id")
        message_id = data.get("message_id")
        media_message_ids = data.get("media_message_ids", [])
        if not ticket_id:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            await state.clear()
            return
        content = message.text or message.caption or ""
        if message.text:
            message_type = "text"
        elif message.photo:
            content = message.photo[-1].file_id
            message_type = "photo"
            media_message_ids.append(message.message_id)
        elif message.video:
            content = message.video.file_id
            message_type = "video"
            media_message_ids.append(message.message_id)
        elif message.document:
            content = message.document.file_id
            message_type = "document"
            media_message_ids.append(message.message_id)
        elif message.sticker:
            content = message.sticker.file_id
            message_type = "sticker"
            media_message_ids.append(message.message_id)
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.")
            return
        await add_ticket_message(ticket_id, message.from_user.id, message.message_id, message_type, content, "user")
        await delete_messages(bot, message.from_user.id, [message_id])
        message = await message.answer(
            "üì¨ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –¥–æ–ø–æ–ª–Ω—è–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=get_user_ticket_keyboard()
        )
        await state.update_data(message_id=message.message_id, media_message_ids=media_message_ids, last_message_time=message.date.timestamp())
        await state.set_state(TicketStates.chatting)
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        user = await get_user(message.from_user.id)
        username = f"@{user[1]}" if user and user[1] else f"ID {message.from_user.id}"
        for admin_id in ADMIN_IDS:
            try:
                if message_type == "text":
                    await bot.send_message(
                        admin_id,
                        f"üÜò –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{ticket_id} –æ—Ç {username}:\n{content}",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_ticket_{ticket_id}")]
                        ])
                    )
                elif message_type == "sticker":
                    await bot.send_sticker(
                        admin_id,
                        content,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_ticket_{ticket_id}")]
                        ])
                    )
                else:
                    caption = f"üÜò –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{ticket_id} –æ—Ç {username}"
                    if message.caption:
                        caption += f"\n{message.caption}"
                    if message_type == "photo":
                        await bot.send_photo(admin_id, content, caption=caption, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_ticket_{ticket_id}")]
                        ]))
                    elif message_type == "video":
                        await bot.send_video(admin_id, content, caption=caption, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_ticket_{ticket_id}")]
                        ]))
                    elif message_type == "document":
                        await bot.send_document(admin_id, content, caption=caption, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_ticket_{ticket_id}")]
                        ]))
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–ø—Ä–æ—Å–µ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        if ticket[3]:
            try:
                if message_type == "text":
                    await bot.send_message(
                        ticket[3],
                        f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–µ #{ticket_id} –æ—Ç {username}:\n{content}"
                    )
                elif message_type == "sticker":
                    await bot.send_sticker(
                        ticket[3],
                        content,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_ticket_{ticket_id}")]
                        ])
                    )
                else:
                    caption = f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–µ #{ticket_id} –æ—Ç {username}"
                    if message.caption:
                        caption += f"\n{message.caption}"
                    if message_type == "photo":
                        await bot.send_photo(ticket[3], content, caption=caption)
                    elif message_type == "video":
                        await bot.send_video(ticket[3], content, caption=caption)
                    elif message_type == "document":
                        await bot.send_document(ticket[3], content, caption=caption)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ticket[3]}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {ticket[3]}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ticket_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@user_router.message(StateFilter(TicketStates.chatting))
async def process_chat_message(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —á–∞—Ç–µ
        data = await state.get_data()
        ticket_id = data.get("ticket_id")
        if not ticket_id:
            await message.answer(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!",
                reply_markup=get_support_menu()
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.",
                reply_markup=get_support_menu()
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å
        is_active = ticket[5] if len(ticket) > 5 else 0
        if is_active == 0:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
                reply_markup=get_support_menu()
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        content, message_type = get_message_content_and_type(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == "unknown":
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.",
                reply_markup=get_user_ticket_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await add_ticket_message(ticket_id, message.from_user.id, message.message_id, message_type, content, "user")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        confirm_message = await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_user_ticket_keyboard()
        )
        
        # –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
        admin_id = ticket[3]
        if admin_id:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
                user = await get_user(message.from_user.id)
                username = f"@{user[1]}" if user and user[1] else f"ID {message.from_user.id}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                if message_type == "text":
                    await bot.send_message(
                        admin_id,
                        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (–≤–æ–ø—Ä–æ—Å #{ticket_id}):\n{content}"
                    )
                elif message_type == "sticker":
                    await bot.send_sticker(admin_id, content)
                    # –î–æ–ø.—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    await bot.send_message(
                        admin_id,
                        f"üë§ {username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä –≤ –≤–æ–ø—Ä–æ—Å–µ #{ticket_id}"
                    )
                else:
                    # –î–ª—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
                    caption = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (–≤–æ–ø—Ä–æ—Å #{ticket_id})"
                    if message.caption:
                        caption += f"\n{message.caption}"
                    
                    if message_type == "photo":
                        await bot.send_photo(admin_id, content, caption=caption)
                    elif message_type == "video":
                        await bot.send_video(admin_id, content, caption=caption)
                    elif message_type == "document":
                        await bot.send_document(admin_id, content, caption=caption)
                
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_chat_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=await get_main_menu(message.from_user.id in ADMIN_IDS, message.from_user.id)
        )

@user_router.callback_query(F.data == "exit_chat")
async def exit_chat(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        ticket_id = data.get("ticket_id")
        message_ids = data.get("message_ids", [])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        if message_ids:
            await delete_messages(bot, callback.from_user.id, message_ids)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞
        await callback.message.answer(
            f"‚Ü©Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ #{ticket_id}. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ–∑–∂–µ.",
            reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ exit_chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞.",
            reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
        )
    
    await callback.answer()

@user_router.callback_query(F.data == "close_user_ticket")
async def close_user_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if callback.from_user.id in ADMIN_IDS:
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ admin_router
        return
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        data = await state.get_data()
        ticket_id = data.get("ticket_id")
        if not ticket_id:
            await callback.message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket:
            await callback.message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ç–∏–∫–µ—Ç
        is_active = ticket[5] if len(ticket) > 5 else 0
        if is_active == 0:
            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç.",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
            await state.clear()
            return
        
        message_id = data.get("message_id")
        media_message_ids = data.get("media_message_ids", [])
        if message_id or media_message_ids:
            await delete_messages(bot, callback.from_user.id, [message_id] + media_message_ids if message_id else media_message_ids)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        success = await close_ticket(ticket_id)
        if not success:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!",
            reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await get_user(callback.from_user.id)
        username = f"@{user[1]}" if user and user[1] else f"ID {callback.from_user.id}"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ç–∏–∫–µ—Ç
        admin_id = ticket[3]
        if admin_id:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å #{ticket_id}",
                    reply_markup=get_admin_menu()
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —Ç–∏–∫–µ—Ç
        for admin_id in ADMIN_IDS:
            if admin_id != ticket[3]:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É
                try:
                    await bot.send_message(
                        admin_id,
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å #{ticket_id}",
                        reply_markup=get_admin_menu()
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        logger.info(f"–í–æ–ø—Ä–æ—Å #{ticket_id} –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_user_ticket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
    await callback.answer()

@user_router.callback_query(F.data == "view_my_tickets")
async def view_my_tickets(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        tickets = await get_open_tickets_by_user(callback.from_user.id)
        if not tickets:
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=get_support_menu()
            )
        else:
            await callback.message.answer(
                "üì¨ –í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
                reply_markup=get_user_tickets_menu(tickets)
            )
        await state.update_data(media_message_ids=[])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_my_tickets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await callback.answer()

@user_router.callback_query(F.data.startswith("view_my_ticket_"))
async def view_my_ticket(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        ticket_id = int(callback.data.split("_")[3])
        ticket = await get_ticket_by_id(ticket_id)
        if not ticket or ticket[1] != callback.from_user.id:
            await callback.message.answer(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
                reply_markup=await get_main_menu(callback.from_user.id in ADMIN_IDS, callback.from_user.id)
            )
            return
        await state.set_state(TicketStates.chatting)
        message = await callback.message.answer(
            "üí¨ –í—ã –≤ —á–∞—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=get_user_ticket_keyboard()
        )
        await state.update_data(ticket_id=ticket_id, message_id=message.message_id, media_message_ids=[], last_message_time=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_my_ticket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–∞.")
    await callback.answer()

@user_router.callback_query(F.data == "about_server")
async def about_server(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        await callback.message.answer(
            "‚ÑπÔ∏è –û —Å–µ—Ä–≤–µ—Ä–µ HorniMine:\n"
            "HorniMine ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ–π Minecraft-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ—Å—ë–ª–æ–π –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏!\n"
            "üåç IP: play.hornimine.fun\n"
            "üéÆ –í–µ—Ä—Å–∏—è: 1.20.1\n"
            "üì¢ Discord: discord.gg/hornimine\n"
            "‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: admin@hornimine.fun",
            reply_markup=get_back_button()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ about_server –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ.")
    await callback.answer()

@user_router.callback_query()
async def unknown_callback_user(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if callback.from_user.id in ADMIN_IDS:
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π callback
            await callback.answer()
            return
            
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        await callback.answer(
            "ü§î –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            show_alert=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@user_router.message(F.text.startswith("/start"))
async def handle_start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await state.clear()
    await add_user(message.from_user.id, message.from_user.username or str(message.from_user.id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_state = await state.get_state()
    if active_state == TicketStates.chatting.__str__():
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        await state.clear()
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HorniMineBot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=await get_main_menu(message.from_user.id in ADMIN_IDS, message.from_user.id)
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

@user_router.message()
async def unknown_message_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        current_state = await state.get_state()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
        if message.text and message.text.startswith('/start'):
            await handle_start_command(message, state)
            return
        
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–∫–æ–º-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—Ç–≤–µ—á–∞–µ–º
        if not current_state:
            await message.answer(
                "ü§î –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=await get_main_menu(message.from_user.id in ADMIN_IDS, message.from_user.id)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start.")

@user_router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "1. –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–ò–º—è –∏–ª–∏ –Ω–∏–∫)",
        reply_markup=get_back_button_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_name)

@user_router.message(ApplicationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "2. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        reply_markup=get_back_button_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_age)

@user_router.message(ApplicationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer(
        "3. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: (–û–ø—ã—Ç –∏–≥—Ä—ã, –ª—é–±–∏–º—ã–µ –∞—Å–ø–µ–∫—Ç—ã Minecraft, —É—á–∞—Å—Ç–∏–µ –≤ –∂–∏–∑–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–¥–µ–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã)",
        reply_markup=get_back_button_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_about)

@user_router.message(StateFilter(ApplicationFormStates.waiting_for_about), F.text)
async def process_about(message: Message, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, message.from_user.id, [last_message_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç '–û —Å–µ–±–µ'
        about_text = message.text.strip()
        application_id = data.get('application_id')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if application_id:
            await update_application_field(application_id, "player_about", about_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–≤–æ–ø—Ä–æ—Å 4)
        await state.set_state(ApplicationFormStates.waiting_for_plans)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞ questions.md
        question = "üéÆ –ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ HorniMine?\n(–ò–≥—Ä–æ–≤–æ–π —Å—Ç–∏–ª—å, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, —Ç–æ—Ä–≥–æ–≤–ª—è –∏ —Ç.–¥.)"
        
        new_message = await message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        await safe_message_delete(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_about –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(StateFilter(ApplicationFormStates.waiting_for_plans), F.text)
async def process_plans(message: Message, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, message.from_user.id, [last_message_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        plans_text = message.text.strip()
        application_id = data.get('application_id')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if application_id:
            await update_application_field(application_id, "player_plans", plans_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–æ–ø—Ä–æ—Å –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ (–≤–æ–ø—Ä–æ—Å 5)
        await state.set_state(ApplicationFormStates.waiting_for_community)
        
        # –í–æ–ø—Ä–æ—Å 5 –∏–∑ questions.md
        question = "üíô –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ?\n(–ß–µ—Å—Ç–Ω–æ—Å—Ç—å, —É–≤–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–≤–æ–±–æ–¥–∞ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–ø.)"
        
        new_message = await message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        await safe_message_delete(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_plans –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(StateFilter(ApplicationFormStates.waiting_for_community), F.text)
async def process_community(message: Message, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, message.from_user.id, [last_message_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
        community_text = message.text.strip()
        application_id = data.get('application_id')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if application_id:
            await update_application_field(application_id, "player_community", community_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–≤–æ–ø—Ä–æ—Å 6)
        await state.set_state(ApplicationFormStates.waiting_for_platform)
        
        # –í–æ–ø—Ä–æ—Å 6 - –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏!
        question = "üéÆ –ù–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?"
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        from keyboards import get_platform_choice_keyboard
        
        new_message = await message.answer(
            question,
            reply_markup=get_platform_choice_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        await safe_message_delete(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_community –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data.startswith("platform_"), StateFilter(ApplicationFormStates.waiting_for_platform))
async def process_platform_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await state.get_data()
        if last_message_id := data.get('last_message_id'):
            await delete_messages(bot, callback.from_user.id, [last_message_id])
        await callback.message.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ callback_data
        platform = callback.data.split("_")[1]  # platform_java -> java
        application_id = data.get('application_id')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if application_id:
            await update_application_field(application_id, "player_platform", platform)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(platform=platform)
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
        if platform in ["java", "both"]:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª Java –∏–ª–∏ –æ–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º Java –Ω–∏–∫–Ω–µ–π–º
            await state.set_state(ApplicationFormStates.waiting_for_java_nickname)
            question = "‚ö° –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º Java\n(–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤):"
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ç–æ–ª—å–∫–æ Bedrock - —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º Bedrock –Ω–∏–∫–Ω–µ–π–º
            await state.set_state(ApplicationFormStates.waiting_for_bedrock_nickname)
            question = "üü¢ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º Bedrock\n(–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤):"
        
        new_message = await callback.message.answer(
            question,
            reply_markup=get_back_button_keyboard()
        )
        await state.update_data(last_message_id=new_message.message_id)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_platform_choice –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@user_router.message(ApplicationStates.waiting_for_java_nickname)
async def process_java_nickname(message: Message, state: FSMContext):
    await state.update_data(java_nickname=message.text)
    await message.answer(
        "9. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞:",
        reply_markup=get_back_button_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_skin)

@user_router.message(ApplicationStates.waiting_for_bedrock_nickname)
async def process_bedrock_nickname(message: Message, state: FSMContext):
    await state.update_data(bedrock_nickname=message.text)
    await message.answer(
        "9. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞:",
        reply_markup=get_back_button_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_skin)

@user_router.message(ApplicationStates.waiting_for_skin, F.photo | F.document)
async def process_skin(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    media = data.get("skin_media", [])
    
    if len(media) >= 2:
        await message.answer("–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 —Ñ–∞–π–ª–æ–≤ —Å–∫–∏–Ω–æ–≤.")
        return
    
    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
    else:
        file_id = message.document.file_id
        media_type = "document"
    
    media.append({"file_id": file_id, "media_type": media_type})
    await state.update_data(skin_media=media)
    
    await message.answer(
        f"–°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω ({len(media)}/2). –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.",
        reply_markup=get_media_continue_keyboard("skin", len(media), 2)
    )

@user_router.callback_query(F.data == "send_application")
async def send_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    application_id = await add_application_with_platform(
        callback.from_user.id,
        data.get("platform")
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã
    fields = [
        ("name", "player_name"),
        ("age", "player_age"),
        ("about", "player_about"),
        ("plans", "player_plans"),
        ("community", "player_community"),
        ("java_nickname", "player_nickname_java"),
        ("bedrock_nickname", "player_nickname_bedrock"),
        ("referral", "player_referral")
    ]
    
    for state_field, db_field in fields:
        if state_field in data:
            await update_application_field(application_id, db_field, data[state_field])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    for media_type in ["skin", "projects"]:
        if f"{media_type}_media" in data:
            for media in data[f"{media_type}_media"]:
                await add_application_media(
                    application_id,
                    media["file_id"],
                    media["media_type"],
                    media_type
                )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º—ã –≤ —Ñ–∞–π–ª
    await save_players_to_file(application_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            "üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–π—Ç–ª–∏—Å—Ç!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                    callback_data=f"view_application_{application_id}"
                )]
            ])
        )
    
    await callback.message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
        reply_markup=get_back_button()
    )
    await state.clear()
    await callback.answer()
